import styles from "./index.module.css";	
import Head from "next/head";	
-import { useValidation, Validation } from "react-validation-strategy";	
+import { useValidation, Validation } from "react-validation-strategy";

const reg = /%|#|\$|@|!/;	
-const AccountValidation = Validation.createValidationSlice({	
-  firstName: Validation.new("")	
-    .length(2, 20)	
+const AccountValidation = Validation.createStateSlice({
+  defaultForm: {
+    default: "", // Default value
+    type: "text", // Input type
+    placeholder: "Enter your %key", // %id
+    settings: {
+      errorStyle: {
+        border: "thick double red",
+      },
+    },
+    accessibility: {
+     ariaLabel: "First Name", // Accessibility labels
+      tabIndex: 0, // Tab index for better accessibility navigation
+    },
+  },
+  firstName: "",
+  lastName: "",
+  username: "",
+  password: "",
+  confirmPassword: "",
+}).validate({
+  firstName: Validation.length(2, 20)
	.match(/^[A-z]*$/)
    .blocking(),
-  lastName: Validation.new("")	
-    .length(2, 20)	
-    .match(/^[A-z]*$/)	
-    .blocking(),	
-  username: Validation.new("").length(5, 10).not(),	
-  password: Validation.new("").match(reg),	
-  confirmPassword: Validation.new("").custom((val) => val.length > 5)	
+  username: Validation.length(5, 10).not(),
+  password: Validation.match(reg),
+  confirmPassword: Validation.custom((val, state) => val === state.password),
});

export default function Home() {	
-  const [syncInput, isValid, actions] = useValidation(AccountValidation);
+  const [syncInput, isValid, actions] = useValidation(AccountValidation);

return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        Username:{" "}
        <input
		  {...sync(
          {...sync(
            "username",
            {
              border: "thick double rgba(0,0,0,0)",
            },
            {
              border: "thick double red",
            }
          )}
          type={"text"}
          placeholder={"Enter your name"}
        />
        <input
		  {...syncInput(
          {...sync(
            "button",
            {
              border: "thick double rgba(0,0,0,0)",
            },
            {
              border: "thick double red",
            }
          )}
          placeholder={"Enter your name"}
          type="radio"
          checked={actions.watch("button") === "1"}
        />
      </main>
    </>
  );
}



$\textcolor{red}{\textsf{Color didint work .}}$ 
$\textcolor{green}{\textsf{Color didint work .}}$ 


toRemovedCode: ^(-.*)$ => $\\textcolor{red}{\\textsf{\\\1}}$ 
toAddedCode: ^(\+.*)$ => $\\textcolor{green}{\\textsf{\1}}$ 
toQuote: ^(.*)$ => > \1  